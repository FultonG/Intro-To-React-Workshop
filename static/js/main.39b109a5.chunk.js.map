{"version":3,"sources":["utils/CatFacts.js","components/Card/Card.js","components/CatFactsCard/CatFactsCard.js","App.js","serviceWorker.js","index.js"],"names":["CatFacts","axios","get","Card","style","container","backgroundColor","borderRadius","padding","boxShadow","marginBottom","width","title","color","subtitle","react_default","a","createElement","CatFactsCard","props","factNumber","fact","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","facts","_this2","then","res","setState","data","all","className","Card_Card","map","obj","index","CatFactsCard_CatFactsCard","key","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAEeA,EACD,WAEN,OAAOC,IAAMC,IAAI,yCCuBVC,MA1Bf,WACI,IAAIC,EAAQ,CACRC,UAAW,CACPC,gBAAiB,QACjBC,aAAc,MACdC,QAAS,OACTC,UAAW,mEACXC,aAAc,OACdC,MAAO,OAEXC,MAAO,CACHC,MAAO,SAEXC,SAAU,CACND,MAAO,SAIf,OACIE,EAAAC,EAAAC,cAAA,OAAKb,MAAOA,EAAMC,WACdU,EAAAC,EAAAC,cAAA,MAAIb,MAAOA,EAAMQ,OAAjB,0BACAG,EAAAC,EAAAC,cAAA,KAAGb,MAAOA,EAAMU,UAAhB,uBCKGI,MA1Bf,SAAsBC,GAClB,IAAIf,EAAQ,CACRC,UAAW,CACPC,gBAAiB,QACjBC,aAAc,MACdC,QAAS,OACTC,UAAW,mEACXC,aAAc,OACdC,MAAO,OAEXC,MAAO,CACHC,MAAO,SAEXC,SAAU,CACND,MAAO,SAIf,OACIE,EAAAC,EAAAC,cAAA,OAAKb,MAAOA,EAAMC,WACdU,EAAAC,EAAAC,cAAA,MAAIb,MAAOA,EAAMQ,OAAjB,aAAmCO,EAAMC,YACzCL,EAAAC,EAAAC,cAAA,KAAGb,MAAOA,EAAMU,UAAWK,EAAME,QCQ9BC,cAxBb,SAAAA,EAAYH,GAAM,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMP,KACDW,MAAQ,CACXC,MAAO,IAHOR,mFAMC,IAAAS,EAAAN,KACjB1B,IAAoBiC,KAAM,SAAAC,GAAG,OAAIF,EAAKG,SAAS,CAACJ,MAAOG,EAAIE,KAAKC,yCAIhE,OACEtB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAAA,UAAQqB,UAAU,cAClBvB,EAAAC,EAAAC,cAACsB,EAAD,MACCb,KAAKI,MAAMC,MAAMS,IAAI,SAACC,EAAKC,GAAN,OACpB3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAcC,IAAKF,EAAOtB,WAAYsB,EAAOrB,KAAMoB,EAAII,kBAjB/CC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.39b109a5.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    getFacts: function(){\n        //if running locally use https://thingproxy.freeboard.io/fetch/ before the url\n        return axios.get(\"https://cat-fact.herokuapp.com/facts\");\n    }\n}","import React from 'react';\n\nfunction Card(){\n    let style = {\n        container: {\n            backgroundColor: \"white\",\n            borderRadius: \"7px\",\n            padding: \"10px\",\n            boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n            marginBottom: \"10px\",\n            width: \"80%\"\n        },\n        title: {\n            color: \"black\"\n        },\n        subtitle: {\n            color: \"grey\"\n        }\n    }\n\n    return (\n        <div style={style.container}>\n            <h1 style={style.title}>Welcome to KnightHacks</h1>\n            <p style={style.subtitle}>How are you today</p>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\n\nfunction CatFactsCard(props){\n    let style = {\n        container: {\n            backgroundColor: \"white\",\n            borderRadius: \"7px\",\n            padding: \"10px\",\n            boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n            marginBottom: \"10px\",\n            width: \"80%\"\n        },\n        title: {\n            color: \"black\"\n        },\n        subtitle: {\n            color: \"grey\"\n        }\n    }\n\n    return (\n        <div style={style.container}>\n            <h1 style={style.title}>Cat Fact #{props.factNumber}</h1>\n            <p style={style.subtitle}>{props.fact}</p>\n        </div>\n    );\n}\n\nexport default CatFactsCard;","import React, { Component } from 'react';\nimport './App.css';\nimport CatFacts from './utils/CatFacts';\nimport { Card } from './components/Card';\nimport { CatFactsCard } from './components/CatFactsCard';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      facts: []\n    }\n  }\n  componentDidMount(){\n    CatFacts.getFacts().then( res => this.setState({facts: res.data.all}));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Card/>\n        {this.state.facts.map((obj, index) =>\n          <CatFactsCard key={index} factNumber={index} fact={obj.text}></CatFactsCard>\n        )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}